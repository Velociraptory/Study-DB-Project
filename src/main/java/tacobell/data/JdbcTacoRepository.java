package tacobell.data;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import tacobell.Ingredient;
import tacobell.Taco;

import java.sql.Timestamp;
import java.sql.Types;
import java.util.Arrays;
import java.util.Date;

@Repository
public class JdbcTacoRepository implements TacoRepository{

    private JdbcTemplate jdbc;
    public JdbcTacoRepository(JdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    @Override
    public Taco save(Taco taco) {
        long tacoId = saveTacoInfo(taco); //saving taco
        taco.setId(tacoId); //setting taco ID with ID which we're get from KeyHolder
        for (Ingredient ingredient : taco.getIngredients()) { //saving taco ingredients
            saveIngredientToTaco(ingredient, tacoId); //inserting ingredients in taco knowing taco ID
        }
        return taco;
    }

    private long saveTacoInfo(Taco taco) {
        taco.setCreatedAt(new Date()); //set taco birthday
        /**When you insert a row into Taco, you need to know the ID generated by the database
        so that you can reference it in each of the ingredients.
         The update() method,
         used when saving ingredient data, doesn’t help you get at the generated ID, so you
         need a different update() method here.
         The update() method you need accepts a PreparedStatementCreator and a Key-
         Holder.
         It’s the KeyHolder that will provide the generated taco ID. But in order to use
         it, you must also create a PreparedStatementCreator.*/
        PreparedStatementCreator psc =
                new PreparedStatementCreatorFactory(
                        "insert into Taco (name, createdAt) values (?, ?)",
                        Types.VARCHAR, Types.TIMESTAMP
                ).newPreparedStatementCreator(
                        Arrays.asList(
                                taco.getName(),
                                new Timestamp(taco.getCreatedAt().getTime())));
        KeyHolder keyHolder = new GeneratedKeyHolder(); //generating ID
        /**With a PreparedStatementCreator in hand, you can call update(), passing in
         PreparedStatementCreator and KeyHolder (in this case, a GeneratedKeyHolder
         instance)*/
        jdbc.update(psc, keyHolder); //executing prepared statement on creating taco
        return keyHolder.getKey().longValue(); //returning ID of created taco
    }
    private void saveIngredientToTaco( //inserting ingredients in taco knowing taco ID
            Ingredient ingredient, long tacoId) {
        jdbc.update(
                "insert into Taco_Ingredients (taco, ingredient) " +
                        "values (?, ?)",
                tacoId, ingredient.getId());
    }

}
